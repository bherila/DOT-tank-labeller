'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.Diagnostics.DebuggerStepThrough(), _
 System.ComponentModel.ToolboxItem(True)> _
Friend Class Data
    Inherits DataSet

    Private tableLabels As LabelsDataTable

    Public Sub New()
        MyBase.New()
        Me.InitClass()
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New()
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)), String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Labels")) Is Nothing) Then
                Me.Tables.Add(New LabelsDataTable(ds.Tables("Labels")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.InitClass()
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Labels() As LabelsDataTable
        Get
            Return Me.tableLabels
        End Get
    End Property

    Public Overrides Function Clone() As DataSet
        Dim cln As Data = CType(MyBase.Clone, Data)
        cln.InitVars()
        Return cln
    End Function

    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset()
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Labels")) Is Nothing) Then
            Me.Tables.Add(New LabelsDataTable(ds.Tables("Labels")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
        Me.InitVars()
    End Sub

    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function

    Friend Sub InitVars()
        Me.tableLabels = CType(Me.Tables("Labels"), LabelsDataTable)
        If (Not (Me.tableLabels) Is Nothing) Then
            Me.tableLabels.InitVars()
        End If
    End Sub

    Private Sub InitClass()
        Me.DataSetName = "Data"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/Data.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = False
        Me.EnforceConstraints = True
        Me.tableLabels = New LabelsDataTable
        Me.Tables.Add(Me.tableLabels)
    End Sub

    Private Function ShouldSerializeLabels() As Boolean
        Return False
    End Function

    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    Public Delegate Sub LabelsRowChangeEventHandler(ByVal sender As Object, ByVal e As LabelsRowChangeEvent)

    <System.Diagnostics.DebuggerStepThrough()> _
    Friend Class LabelsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable

        Private columnBoiler_Plate As DataColumn

        Private columnContents As DataColumn

        Private columnDOT_Shipping_Name As DataColumn

        Private columnFlammabilty As DataColumn

        Private columnHealth As DataColumn

        Private columnIcon As DataColumn

        Private columnProduct_Name As DataColumn

        Private columnProduct_Number As DataColumn

        Private columnReactivity As DataColumn

        Friend Sub New()
            MyBase.New("Labels")
            Me.InitClass()
        End Sub

        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub

        <System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        Friend ReadOnly Property Boiler_PlateColumn() As DataColumn
            Get
                Return Me.columnBoiler_Plate
            End Get
        End Property

        Friend ReadOnly Property ContentsColumn() As DataColumn
            Get
                Return Me.columnContents
            End Get
        End Property

        Friend ReadOnly Property DOT_Shipping_NameColumn() As DataColumn
            Get
                Return Me.columnDOT_Shipping_Name
            End Get
        End Property

        Friend ReadOnly Property FlammabiltyColumn() As DataColumn
            Get
                Return Me.columnFlammabilty
            End Get
        End Property

        Friend ReadOnly Property HealthColumn() As DataColumn
            Get
                Return Me.columnHealth
            End Get
        End Property

        Friend ReadOnly Property IconColumn() As DataColumn
            Get
                Return Me.columnIcon
            End Get
        End Property

        Friend ReadOnly Property Product_NameColumn() As DataColumn
            Get
                Return Me.columnProduct_Name
            End Get
        End Property

        Friend ReadOnly Property Product_NumberColumn() As DataColumn
            Get
                Return Me.columnProduct_Number
            End Get
        End Property

        Friend ReadOnly Property ReactivityColumn() As DataColumn
            Get
                Return Me.columnReactivity
            End Get
        End Property

        Default Public ReadOnly Property Item(ByVal index As Integer) As LabelsRow
            Get
                Return CType(Me.Rows(index), LabelsRow)
            End Get
        End Property

        Public Event LabelsRowChanged As LabelsRowChangeEventHandler

        Public Event LabelsRowChanging As LabelsRowChangeEventHandler

        Public Event LabelsRowDeleted As LabelsRowChangeEventHandler

        Public Event LabelsRowDeleting As LabelsRowChangeEventHandler

        Public Overloads Sub AddLabelsRow(ByVal row As LabelsRow)
            Me.Rows.Add(row)
        End Sub

        Public Overloads Function AddLabelsRow(ByVal Boiler_Plate As String, ByVal Contents As String, ByVal DOT_Shipping_Name As String, ByVal Flammabilty As String, ByVal Health As String, ByVal Icon As String, ByVal Product_Name As String, ByVal Product_Number As String, ByVal Reactivity As String) As LabelsRow
            Dim rowLabelsRow As LabelsRow = CType(Me.NewRow, LabelsRow)
            rowLabelsRow.ItemArray = New Object() {Boiler_Plate, Contents, DOT_Shipping_Name, Flammabilty, Health, Icon, Product_Name, Product_Number, Reactivity}
            Me.Rows.Add(rowLabelsRow)
            Return rowLabelsRow
        End Function

        Public Function FindByProduct_Number(ByVal Product_Number As String) As LabelsRow
            Return CType(Me.Rows.Find(New Object() {Product_Number}), LabelsRow)
        End Function

        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        Public Overrides Function Clone() As DataTable
            Dim cln As LabelsDataTable = CType(MyBase.Clone, LabelsDataTable)
            cln.InitVars()
            Return cln
        End Function

        Protected Overrides Function CreateInstance() As DataTable
            Return New LabelsDataTable
        End Function

        Friend Sub InitVars()
            Me.columnBoiler_Plate = Me.Columns("Boiler_Plate")
            Me.columnContents = Me.Columns("Contents")
            Me.columnDOT_Shipping_Name = Me.Columns("DOT_Shipping_Name")
            Me.columnFlammabilty = Me.Columns("Flammabilty")
            Me.columnHealth = Me.Columns("Health")
            Me.columnIcon = Me.Columns("Icon")
            Me.columnProduct_Name = Me.Columns("Product_Name")
            Me.columnProduct_Number = Me.Columns("Product_Number")
            Me.columnReactivity = Me.Columns("Reactivity")
        End Sub

        Private Sub InitClass()
            Me.columnBoiler_Plate = New DataColumn("Boiler_Plate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBoiler_Plate)
            Me.columnContents = New DataColumn("Contents", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContents)
            Me.columnDOT_Shipping_Name = New DataColumn("DOT_Shipping_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOT_Shipping_Name)
            Me.columnFlammabilty = New DataColumn("Flammabilty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFlammabilty)
            Me.columnHealth = New DataColumn("Health", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHealth)
            Me.columnIcon = New DataColumn("Icon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIcon)
            Me.columnProduct_Name = New DataColumn("Product_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProduct_Name)
            Me.columnProduct_Number = New DataColumn("Product_Number", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProduct_Number)
            Me.columnReactivity = New DataColumn("Reactivity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReactivity)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnProduct_Number}, True))
            Me.columnProduct_Number.AllowDBNull = False
            Me.columnProduct_Number.Unique = True
        End Sub

        Public Function NewLabelsRow() As LabelsRow
            Return CType(Me.NewRow, LabelsRow)
        End Function

        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LabelsRow(builder)
        End Function

        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LabelsRow)
        End Function

        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LabelsRowChangedEvent) Is Nothing) Then
                RaiseEvent LabelsRowChanged(Me, New LabelsRowChangeEvent(CType(e.Row, LabelsRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LabelsRowChangingEvent) Is Nothing) Then
                RaiseEvent LabelsRowChanging(Me, New LabelsRowChangeEvent(CType(e.Row, LabelsRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LabelsRowDeletedEvent) Is Nothing) Then
                RaiseEvent LabelsRowDeleted(Me, New LabelsRowChangeEvent(CType(e.Row, LabelsRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LabelsRowDeletingEvent) Is Nothing) Then
                RaiseEvent LabelsRowDeleting(Me, New LabelsRowChangeEvent(CType(e.Row, LabelsRow), e.Action))
            End If
        End Sub

        Public Sub RemoveLabelsRow(ByVal row As LabelsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Friend Class LabelsRow
        Inherits DataRow

        Private tableLabels As LabelsDataTable

        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLabels = CType(Me.Table, LabelsDataTable)
        End Sub

        Public Property Boiler_Plate() As String
            Get
                Try
                    Return CType(Me(Me.tableLabels.Boiler_PlateColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLabels.Boiler_PlateColumn) = Value
            End Set
        End Property

        Public Property Contents() As String
            Get
                Try
                    Return CType(Me(Me.tableLabels.ContentsColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLabels.ContentsColumn) = Value
            End Set
        End Property

        Public Property DOT_Shipping_Name() As String
            Get
                Try
                    Return CType(Me(Me.tableLabels.DOT_Shipping_NameColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLabels.DOT_Shipping_NameColumn) = Value
            End Set
        End Property

        Public Property Flammabilty() As String
            Get
                Try
                    Return CType(Me(Me.tableLabels.FlammabiltyColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLabels.FlammabiltyColumn) = Value
            End Set
        End Property

        Public Property Health() As String
            Get
                Try
                    Return CType(Me(Me.tableLabels.HealthColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLabels.HealthColumn) = Value
            End Set
        End Property

        Public Property Icon() As String
            Get
                Try
                    Return CType(Me(Me.tableLabels.IconColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLabels.IconColumn) = Value
            End Set
        End Property

        Public Property Product_Name() As String
            Get
                Try
                    Return CType(Me(Me.tableLabels.Product_NameColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLabels.Product_NameColumn) = Value
            End Set
        End Property

        Public Property Product_Number() As String
            Get
                Return CType(Me(Me.tableLabels.Product_NumberColumn), String)
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLabels.Product_NumberColumn) = Value
            End Set
        End Property

        Public Property Reactivity() As String
            Get
                Try
                    Return CType(Me(Me.tableLabels.ReactivityColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLabels.ReactivityColumn) = Value
            End Set
        End Property

        Public Function IsBoiler_PlateNull() As Boolean
            Return Me.IsNull(Me.tableLabels.Boiler_PlateColumn)
        End Function

        Public Sub SetBoiler_PlateNull()
            Me(Me.tableLabels.Boiler_PlateColumn) = System.Convert.DBNull
        End Sub

        Public Function IsContentsNull() As Boolean
            Return Me.IsNull(Me.tableLabels.ContentsColumn)
        End Function

        Public Sub SetContentsNull()
            Me(Me.tableLabels.ContentsColumn) = System.Convert.DBNull
        End Sub

        Public Function IsDOT_Shipping_NameNull() As Boolean
            Return Me.IsNull(Me.tableLabels.DOT_Shipping_NameColumn)
        End Function

        Public Sub SetDOT_Shipping_NameNull()
            Me(Me.tableLabels.DOT_Shipping_NameColumn) = System.Convert.DBNull
        End Sub

        Public Function IsFlammabiltyNull() As Boolean
            Return Me.IsNull(Me.tableLabels.FlammabiltyColumn)
        End Function

        Public Sub SetFlammabiltyNull()
            Me(Me.tableLabels.FlammabiltyColumn) = System.Convert.DBNull
        End Sub

        Public Function IsHealthNull() As Boolean
            Return Me.IsNull(Me.tableLabels.HealthColumn)
        End Function

        Public Sub SetHealthNull()
            Me(Me.tableLabels.HealthColumn) = System.Convert.DBNull
        End Sub

        Public Function IsIconNull() As Boolean
            Return Me.IsNull(Me.tableLabels.IconColumn)
        End Function

        Public Sub SetIconNull()
            Me(Me.tableLabels.IconColumn) = System.Convert.DBNull
        End Sub

        Public Function IsProduct_NameNull() As Boolean
            Return Me.IsNull(Me.tableLabels.Product_NameColumn)
        End Function

        Public Sub SetProduct_NameNull()
            Me(Me.tableLabels.Product_NameColumn) = System.Convert.DBNull
        End Sub

        Public Function IsReactivityNull() As Boolean
            Return Me.IsNull(Me.tableLabels.ReactivityColumn)
        End Function

        Public Sub SetReactivityNull()
            Me(Me.tableLabels.ReactivityColumn) = System.Convert.DBNull
        End Sub
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Friend Class LabelsRowChangeEvent
        Inherits EventArgs

        Private eventRow As LabelsRow

        Private eventAction As DataRowAction

        Public Sub New(ByVal row As LabelsRow, ByVal action As DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        Public ReadOnly Property Row() As LabelsRow
            Get
                Return Me.eventRow
            End Get
        End Property

        Public ReadOnly Property Action() As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
